#include "../../include/minirt.h"

// src/assets/ft_ray.c
t_ray generate_antialiased_ray(int x, int y, int sub_x, int sub_y, t_scene *scene)
{
    t_ray   ray;
    t_vec3  camera_right;
    t_vec3  camera_up;
    t_vec3  viewport_center;
    double  aspect_ratio;
    double  fov_rad;
    double  x_coord_normalized;
    double  y_coord_normalized;
    double  jitter_x;
    double  jitter_y;

    ray.origin = scene->camera.position;

    fov_rad = scene->camera.fov * M_PI / 180.0;
    aspect_ratio = (double)scene->width / (double)scene->height;

    camera_up = vec3_init(0.0, 1.0, 0.0);
    camera_right = vec3_normalize(vec3_cross(scene->camera.orientation, camera_up));
    camera_up = vec3_normalize(vec3_cross(camera_right, scene->camera.orientation));

    // Ajustar las coordenadas del píxel para el subpíxel
    jitter_x = ((double)sub_x + 0.5) / SUBPIXEL_SAMPLES;
    jitter_y = ((double)sub_y + 0.5) / SUBPIXEL_SAMPLES;

    x_coord_normalized = ((double)x + jitter_x) / scene->width - 0.5;
    y_coord_normalized = 0.5 - ((double)y + jitter_y) / scene->height;
    
    viewport_center = vec3_add(scene->camera.position, vec3_mul(scene->camera.orientation, 1.0));
    ray.direction = vec3_add(vec3_add(viewport_center, vec3_mul(camera_right, 2.0 * tan(fov_rad / 2.0) * aspect_ratio * x_coord_normalized)),
                             vec3_mul(camera_up, 2.0 * tan(fov_rad / 2.0) * y_coord_normalized));
    ray.direction = vec3_sub(ray.direction, ray.origin);
    ray.direction = vec3_normalize(ray.direction);

    return (ray);
}

t_ray generate_ray(int x, int y, t_scene *scene)
{
    t_ray   ray;
    t_vec3  camera_right;
    t_vec3  camera_up;
    t_vec3  viewport_center;
    double  aspect_ratio;
    double  fov_rad;
    double  x_norm;
    double  y_norm;

    ray.origin = scene->camera.position;

    fov_rad = scene->camera.fov * M_PI / 180.0;
    aspect_ratio = (double)scene->width / (double)scene->height;

    // Calcular los vectores "right" y "up" de la cámara
    camera_up = vec3_init(0.0, 1.0, 0.0);
    camera_right = vec3_normalize(vec3_cross(scene->camera.orientation, camera_up));
    camera_up = vec3_normalize(vec3_cross(camera_right, scene->camera.orientation));

    // Mapear las coordenadas del píxel a un plano de la vista
    x_norm = ((double)x / scene->width) - 0.5;
    y_norm = 0.5 - ((double)y / scene->height);
    
    // Calcular el punto en el plano de la vista
    viewport_center = vec3_add(scene->camera.position, vec3_mul(scene->camera.orientation, 1.0));
    ray.direction = vec3_add(vec3_add(viewport_center, vec3_mul(camera_right, 2.0 * tan(fov_rad / 2.0) * aspect_ratio * x_norm)),
                             vec3_mul(camera_up, 2.0 * tan(fov_rad / 2.0) * y_norm));
    ray.direction = vec3_sub(ray.direction, ray.origin);
    ray.direction = vec3_normalize(ray.direction);

    return (ray);
}

t_color get_object_color(t_hit_record *rec)
{
    // Primer y más importante: Si no hay material, devuelve el color base.
    if (!rec->object->material)
        return (rec->object->color);

    // Si el material tiene una textura principal
    if (rec->object->material->has_texture)
    {
        return (get_texture_color(rec));
    }
    // Si tiene un tablero de ajedrez
    else if (rec->object->material->has_checkerboard)
    {
        t_vec3 local_point = rec->point;
        int pattern_x = (int)floor(local_point.x / rec->object->material->check_scale);
        int pattern_y = (int)floor(local_point.y / rec->object->material->check_scale);
        int pattern_z = (int)floor(local_point.z / rec->object->material->check_scale);
        
        if ((pattern_x + pattern_y + pattern_z) % 2 == 0)
            return (rec->object->material->check_color1);
        else
            return (rec->object->material->check_color2);
    }
    // Si no tiene ni textura ni tablero, devuelve el color base del objeto
    else
    {
        return (rec->object->color);
    }
}

// Corregido: Agrega validación para el material
t_color calculate_specular_light(t_hit_record *rec, t_light *light, t_ray *ray)
{
    t_vec3      to_light;
    t_vec3      view_dir;
    t_vec3      reflected_dir;
    double      spec_factor;
    t_color     specular_color;

    if (!rec || !rec->object || !rec->object->material)
        return (vec3_init(0, 0, 0));

    to_light = vec3_normalize(vec3_sub(light->position, rec->point));
    view_dir = vec3_normalize(vec3_mul(ray->direction, -1.0));
    reflected_dir = vec3_reflect(to_light, rec->normal);

    spec_factor = vec3_dot(view_dir, reflected_dir);
    if (spec_factor > 0)
    {
        spec_factor = pow(spec_factor, rec->object->material->specular.shininess);
        specular_color = vec3_mul(light->color, rec->object->material->specular.intensity * spec_factor);
        return (specular_color);
    }
    return (vec3_init(0, 0, 0));
}

// Corregido: calculate_light ahora maneja la reflexión
t_color calculate_light(t_hit_record *rec, t_scene *scene, t_ray *ray, int depth)
{
    t_color final_color;
    t_color ambient_color;
    t_light **lights = (t_light **)scene->lights;
    int     i = 0;

    // Primer y más importante: validar el objeto del hit record.
    if (rec->object == NULL)
        return (scene->background_color);

    // Obtener el color del objeto (color sólido, tablero o textura)
    t_color object_color = get_object_color(rec);

    // 1. Luz ambiente
    ambient_color = vec3_mult_vec(scene->ambient.color, object_color);
    ambient_color = vec3_mul(ambient_color, scene->ambient.ratio);
    final_color = ambient_color;

    // 2. Iterar sobre las luces
    while (lights[i] != NULL)
    {
        t_vec3 to_light = vec3_normalize(vec3_sub(lights[i]->position, rec->point));

        // Rayo de sombra
        t_ray shadow_ray;
        shadow_ray.origin = vec3_add(rec->point, vec3_mul(rec->normal, EPSILON));
        shadow_ray.direction = to_light;
        
        if (is_in_shadow(&shadow_ray, scene, lights[i]))
        {
            i++;
            continue;
        }

        // 3. Diffuse Light
        double dot_prod = vec3_dot(rec->normal, to_light);
        if (dot_prod > 0)
        {
            // The contribution is a mix of the light's color and the object's color
            t_color diffuse_contribution = vec3_mult_vec(lights[i]->color, object_color);
            diffuse_contribution = vec3_mul(diffuse_contribution, dot_prod * lights[i]->brightness);
            final_color = vec3_add(final_color, diffuse_contribution);
        }

        // 4. Specular Light
        if (rec->object->material && rec->object->material->specular.intensity > 0.0)
        {
            t_color specular_color = calculate_specular_light(rec, lights[i], ray);
            final_color = vec3_add(final_color, specular_color);
        }
        i++;
    }
    // 5. Manejo de la reflexión (materiales de espejo)
    // El control de la reflexión debe ir después del cálculo de la luz difusa/especular
    // y solo si el objeto tiene propiedades de espejo.
    if (rec->object->material && rec->object->material->mirror_ratio > 0.0 && depth < MAX_RECURSION_DEPTH)
    {
        t_ray reflected_ray;
        reflected_ray.origin = vec3_add(rec->point, vec3_mul(rec->normal, EPSILON));
        reflected_ray.direction = vec3_reflect(ray->direction, rec->normal);

        t_hit_record reflected_rec = find_closest_hit(&reflected_ray, scene);

        t_color reflected_color;
        if (reflected_rec.object != NULL)
            reflected_color = calculate_light(&reflected_rec, scene, &reflected_ray, depth + 1);
        else
            reflected_color = scene->background_color;

        final_color = vec3_add(vec3_mul(final_color, 1.0 - rec->object->material->mirror_ratio),
                               vec3_mul(reflected_color, rec->object->material->mirror_ratio));
    }
        // Final clamp to prevent values from going over 1.0
    final_color.x = fmin(1.0, fmax(0.0, final_color.x));
    final_color.y = fmin(1.0, fmax(0.0, final_color.y));
    final_color.z = fmin(1.0, fmax(0.0, final_color.z));
    return (final_color);
}

// t_color calculate_light(t_hit_record *rec, t_scene *scene, t_ray *ray, int depth)
// {
//     t_color final_color;
//     t_color ambient_color;
//     t_light **lights = (t_light **)scene->lights;
//     int     i = 0;

//     if (rec->object == NULL)
//         return (scene->background_color);

//     t_color object_color = get_object_color(rec);

//     ambient_color = vec3_mult_vec(scene->ambient.color, object_color);
//     ambient_color = vec3_mul(ambient_color, scene->ambient.ratio);
//     final_color = ambient_color;

//     while (lights[i] != NULL)
//     {
//         t_vec3 to_light = vec3_normalize(vec3_sub(lights[i]->position, rec->point));

//         t_ray shadow_ray;
//         shadow_ray.origin = vec3_add(rec->point, vec3_mul(rec->normal, EPSILON));
//         shadow_ray.direction = to_light;
        
//         if (is_in_shadow(&shadow_ray, scene, lights[i]))
//         {
//             i++;
//             continue;
//         }

//         double dot_prod = vec3_dot(rec->normal, to_light);
//         if (dot_prod > 0)
//         {
//             t_color diffuse_contribution = vec3_mult_vec(lights[i]->color, object_color);
//             diffuse_contribution = vec3_mul(diffuse_contribution, dot_prod * lights[i]->brightness);
//             final_color = vec3_add(final_color, diffuse_contribution);
//         }

//         if (rec->object->material && rec->object->material->specular.intensity > 0.0)
//         {
//             t_color specular_color = calculate_specular_light(rec, lights[i], ray);
//             final_color = vec3_add(final_color, specular_color);
//         }
//         i++;
//     }

//     if (rec->object->material && rec->object->material->mirror_ratio > 0.0 && depth < MAX_RECURSION_DEPTH)
//     {
//         t_ray reflected_ray;
//         reflected_ray.origin = vec3_add(rec->point, vec3_mul(rec->normal, EPSILON));
        
//         // CORRECCIÓN CLAVE: Invertir la dirección del rayo original
//         t_vec3 incident_direction = vec3_mul(ray->direction, -1.0);
//         reflected_ray.direction = vec3_reflect(incident_direction, rec->normal);

//         t_hit_record reflected_rec = find_closest_hit(&reflected_ray, scene);

//         t_color reflected_color;
//         if (reflected_rec.object != NULL)
//             reflected_color = calculate_light(&reflected_rec, scene, &reflected_ray, depth + 1);
//         else
//             reflected_color = scene->background_color;

//         final_color = vec3_add(vec3_mul(final_color, 1.0 - rec->object->material->mirror_ratio),
//                                vec3_mul(reflected_color, rec->object->material->mirror_ratio));
//     }

//     final_color.x = fmin(1.0, fmax(0.0, final_color.x));
//     final_color.y = fmin(1.0, fmax(0.0, final_color.y));
//     final_color.z = fmin(1.0, fmax(0.0, final_color.z));
    
//     return (final_color);
// }

t_vec2 get_uv_sphere(t_hit_record *rec)
{
    t_vec3 local_point = vec3_sub(rec->point, ((t_sphere *)rec->object->data)->center);
    double u = 0.5 + atan2(local_point.z, local_point.x) / (2.0 * M_PI);
    double v = 0.5 - asin(local_point.y / ((t_sphere *)rec->object->data)->radius) / M_PI;
    return (vec2_init(u, v));
}

// Ejemplo para un plano
t_vec2 get_uv_plane(t_hit_record *rec)
{
    // Esto es una simple proyección en 2D
    double u = fmod(rec->point.x, 1.0);
    double v = fmod(rec->point.z, 1.0);
    if (u < 0) u += 1.0;
    if (v < 0) v += 1.0;
    return (vec2_init(u, v));
}

// Ejemplo para un cilindro
t_vec2 get_uv_cylinder(t_hit_record *rec)
{
    t_cylinder *cy = (t_cylinder *)rec->object->data;
    t_vec3 local_point = vec3_sub(rec->point, cy->position);
    
    // Altura del cilindro
    double m = vec3_dot(local_point, cy->axis);
    double v = (m + cy->height / 2.0) / cy->height;

    // Ángulo alrededor del cilindro
    t_vec3 temp_axis = vec3_normalize(vec3_cross(cy->axis, vec3_init(1, 0, 0)));
    if (vec3_length(temp_axis) < EPSILON)
        temp_axis = vec3_normalize(vec3_cross(cy->axis, vec3_init(0, 1, 0)));
        
    t_vec3 p = vec3_sub(local_point, vec3_mul(cy->axis, m));
    double u = acos(vec3_dot(p, temp_axis) / vec3_length(p)) / (2.0 * M_PI);
    
    if (vec3_dot(vec3_cross(temp_axis, p), cy->axis) < 0)
        u = 1.0 - u;
        
    return (vec2_init(u, v));
}

// src/assets/ft_ray.c (o donde tengas tu lógica de renderizado)
t_color get_texture_color(t_hit_record *rec)
{
    t_vec2          uv;
    mlx_texture_t   *texture;
    int             x_tex;
    int             y_tex;
    int             index;

    // 1. Validate that the texture pointer exists before use
    if (!rec->object->material || !rec->object->material->texture)
        return (rec->object->color); // Fallback to the object's base color

    texture = rec->object->material->texture;

    // 2. Validate texture dimensions to prevent division by zero or invalid indices
    if (texture->width <= 0 || texture->height <= 0)
        return (rec->object->color);

    // 3. Select the correct UV mapping function based on object type
    if (rec->object->type == SPHERE)
        uv = get_uv_sphere(rec);
    else if (rec->object->type == PLANE)
        uv = get_uv_plane(rec);
    else if (rec->object->type == CYLINDER)
        uv = get_uv_cylinder(rec);
    // Add more object types here if needed (e.g., CONE)
    else
        return (rec->object->color); // Fallback for objects without texture mapping

    // 4. Clamp UV coordinates to prevent out-of-bounds access
    uv.x = fmax(0.0, fmin(1.0, uv.x));
    uv.y = fmax(0.0, fmin(1.0, uv.y));
    
    x_tex = (int)(uv.x * (texture->width - 1));
    y_tex = (int)(uv.y * (texture->height - 1));

    index = (y_tex * texture->width + x_tex) * 4;

    t_color tex_color;

    // Lee los bytes en orden ARGB (Alfa, Rojo, Verde, Azul)
    // El formato ARGB es común, y el canal R (Red) es el segundo byte.
    tex_color.x = (double)texture->pixels[index] / 255.0;     // Red
    tex_color.y = (double)texture->pixels[index + 1] / 255.0; // Green
    tex_color.z = (double)texture->pixels[index + 2] / 255.0; // Blue
    
    return (tex_color);
}

t_hit_record find_closest_hit(t_ray *ray, t_scene *scene)
{
    t_hit_record    closest_hit;
    t_hit_record    current_hit;
    t_object        **objects = (t_object **)scene->objects;
    double          min_t = -1.0;
    int             i = 0;

    closest_hit.object = NULL;
    if (!objects) 
        return (closest_hit);
    while (objects[i] != NULL)
    {
        current_hit.t = -1.0;
        if (objects[i]->type == SPHERE)
            intersect_sphere(ray, (t_sphere *)objects[i]->data, &current_hit);
        else if (objects[i]->type == PLANE)
            intersect_plane(ray, (t_plane *)objects[i]->data, &current_hit);
        else if (objects[i]->type == CYLINDER)
            intersect_cylinder(ray, (t_cylinder *)objects[i]->data, &current_hit);
        else if (objects[i]->type == CONE) // Nuevo: Cono
            intersect_cone(ray, (t_cone *)objects[i]->data, &current_hit);
        else if (objects[i]->type == HYPERBOLOID) // Nuevo: Hiperboloide
            intersect_hyperboloid(ray, (t_hyperboloid *)objects[i]->data, &current_hit);
        else if (objects[i]->type == PARABOLOID) // Asegúrate de que PARABOLOID está definido en tu enum
            intersect_paraboloid(ray, (t_parab *)objects[i]->data, &current_hit);

        if (current_hit.t > EPSILON && (min_t < 0 || current_hit.t < min_t))
        {
            min_t = current_hit.t;
            closest_hit = current_hit;
            closest_hit.object = objects[i];
            closest_hit.ray = *ray; // Almacena el rayo para la reflexión
        }
        i++;
    }
    return (closest_hit);
}

int intersect_paraboloid(t_ray *ray, t_parab *pb, t_hit_record *rec)
{
    t_vec3  oc;
    double  a, b, c;
    double  discriminant;
    double  t1, t2, t_final;

    // 1. Mover el origen del rayo al espacio del objeto
    oc = vec3_sub(ray->origin, pb->position);
    
    // 2. Coeficientes de la ecuación cuadrática (sin rotar)
    // Ecuación: |D - (D·A)A|^2 t^2 + 2( (O - (O·A)A)·(D - (D·A)A) )t + |O - (O·A)A|^2 - 4f(O·A) = 0
    t_vec3 axis_norm = vec3_normalize(pb->axis);
    
    double dot_d_axis = vec3_dot(ray->direction, axis_norm);
    double dot_oc_axis = vec3_dot(oc, axis_norm);

    t_vec3 d_proj = vec3_mul(axis_norm, dot_d_axis);
    t_vec3 oc_proj = vec3_mul(axis_norm, dot_oc_axis);

    t_vec3 d_perp = vec3_sub(ray->direction, d_proj);
    t_vec3 oc_perp = vec3_sub(oc, oc_proj);

    a = vec3_dot(d_perp, d_perp);
    b = 2.0 * vec3_dot(d_perp, oc_perp) - 4.0 * pb->focal_lenght * dot_d_axis;
    c = vec3_dot(oc_perp, oc_perp) - 4.0 * pb->focal_lenght * dot_oc_axis;

    // 3. Calcular el discriminante y las raíces
    discriminant = b * b - 4 * a * c;
    if (discriminant < EPSILON)
        return (0);

    t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    t2 = (-b + sqrt(discriminant)) / (2.0 * a);

    // 4. Encontrar la intersección más cercana y válida
    t_final = -1.0;
    
    // Probar t1
    if (t1 > EPSILON)
    {
        double height = dot_d_axis * t1 + dot_oc_axis;
        if (height >= 0.0 && height <= pb->height)
            t_final = t1;
    }
    
    // Probar t2
    if (t2 > EPSILON)
    {
        double height = dot_d_axis * t2 + dot_oc_axis;
        if (height >= 0.0 && height <= pb->height)
        {
            if (t_final < 0 || t2 < t_final)
                t_final = t2;
        }
    }
    
    if (t_final < 0)
        return (0);

    // 5. Rellenar el registro de impacto
    rec->t = t_final;
    rec->point = ray_at(*ray, rec->t);

    // 6. Calcular la normal en el punto de impacto
    t_vec3 hit_point_local = vec3_sub(rec->point, pb->position);
    double m = vec3_dot(hit_point_local, axis_norm);
    t_vec3 normal_unnorm = vec3_sub(vec3_sub(hit_point_local, vec3_mul(axis_norm, m)), vec3_mul(axis_norm, 2.0 * pb->focal_lenght));
    rec->normal = vec3_normalize(normal_unnorm);

    // Asegurarse de que la normal apunte hacia el rayo
    if (vec3_dot(rec->normal, ray->direction) > 0)
        rec->normal = vec3_mul(rec->normal, -1.0);
    
    return (1);
}

int intersect_sphere(t_ray *ray, t_sphere *sp, t_hit_record *rec)
{
    t_vec3  oc;
    double  a;
    double  b;
    double  c;
    double  discriminant;
    double  t;

    oc = vec3_sub(ray->origin, sp->center);
    a = vec3_dot(ray->direction, ray->direction);
    b = 2.0 * vec3_dot(oc, ray->direction);
    c = vec3_dot(oc, oc) - sp->radius * sp->radius;
    
    discriminant = b * b - 4 * a * c;
    if (discriminant < 0)
        return (0);

    // Encuentra la primera intersección válida (la más cercana)
    t = (-b - sqrt(discriminant)) / (2.0 * a);
    if (t < EPSILON)
    {
        t = (-b + sqrt(discriminant)) / (2.0 * a);
        if (t < EPSILON)
            return (0);
    }

    rec->t = t;
    rec->point = ray_at(*ray, rec->t);
    rec->normal = vec3_normalize(vec3_sub(rec->point, sp->center));

    // Corrige la normal si el rayo viene de dentro de la esfera
    if (vec3_dot(ray->direction, rec->normal) > 0)
        rec->normal = vec3_mul(rec->normal, -1.0);

    return (1);
}

int intersect_plane(t_ray *ray, t_plane *pl, t_hit_record *rec)
{
    double  denominator;
    double  t;
    
    denominator = vec3_dot(pl->normal, ray->direction);
    if (fabs(denominator) < EPSILON)
        return (0);

    t = vec3_dot(vec3_sub(pl->position, ray->origin), pl->normal) / denominator;
    if (t < EPSILON)
        return (0);

    rec->t = t;
    rec->point = ray_at(*ray, rec->t);
    
    // Lógica corregida para la normal del plano
    if (vec3_dot(pl->normal, ray->direction) > 0)
        rec->normal = vec3_mul(pl->normal, -1.0);
    else
        rec->normal = pl->normal;

    return (1);
}
double  vec3_length_squared(t_vec3 v)
{
    return (vec3_dot(v, v));
}

static int intersect_caps(t_ray *ray, t_cylinder *cy, double *t_cap, t_hit_record *rec)
{
    double  t_top, t_bottom;
    t_vec3  p_top, p_bottom;

    double denom = vec3_dot(ray->direction, cy->axis);
    if (fabs(denom) < EPSILON)
        t_top = -1.0;
    else
        t_top = vec3_dot(vec3_sub(vec3_add(cy->position, vec3_mul(cy->axis, cy->height / 2.0)), ray->origin), cy->axis) / denom;
    
    p_top = ray_at(*ray, t_top);
    if (t_top > EPSILON && vec3_length_squared(vec3_sub(p_top, vec3_add(cy->position, vec3_mul(cy->axis, cy->height / 2.0)))) <= cy->radius * cy->radius)
        *t_cap = t_top;
    else
        *t_cap = -1.0;

    if (fabs(denom) < EPSILON)
        t_bottom = -1.0;
    else
        t_bottom = vec3_dot(vec3_sub(vec3_add(cy->position, vec3_mul(cy->axis, -cy->height / 2.0)), ray->origin), cy->axis) / denom;

    p_bottom = ray_at(*ray, t_bottom);
    if (t_bottom > EPSILON && vec3_length_squared(vec3_sub(p_bottom, vec3_add(cy->position, vec3_mul(cy->axis, -cy->height / 2.0)))) <= cy->radius * cy->radius)
    {
        if (*t_cap < 0 || t_bottom < *t_cap)
            *t_cap = t_bottom;
    }

    if (*t_cap > EPSILON)
    {
        rec->point = ray_at(*ray, *t_cap);
        if (denom > 0)
            rec->normal = vec3_mul(cy->axis, -1.0);
        else
            rec->normal = cy->axis;
        return (1);
    }
    return (0);
}

static int intersect_sides(t_ray *ray, t_cylinder *cy, t_hit_record *rec)
{
    double  a, b, c;
    double  discriminant;
    double  t_side;
    t_vec3  oc = vec3_sub(ray->origin, cy->position);
    
    a = vec3_dot(vec3_sub(ray->direction, vec3_mul(cy->axis, vec3_dot(ray->direction, cy->axis))),
                 vec3_sub(ray->direction, vec3_mul(cy->axis, vec3_dot(ray->direction, cy->axis))));
    b = 2.0 * vec3_dot(vec3_sub(ray->direction, vec3_mul(cy->axis, vec3_dot(ray->direction, cy->axis))),
                       vec3_sub(oc, vec3_mul(cy->axis, vec3_dot(oc, cy->axis))));
    c = vec3_dot(vec3_sub(oc, vec3_mul(cy->axis, vec3_dot(oc, cy->axis))),
                 vec3_sub(oc, vec3_mul(cy->axis, vec3_dot(oc, cy->axis)))) - (cy->radius * cy->radius);

    discriminant = b * b - 4 * a * c;
    if (discriminant < 0)
        return (0);

    t_side = (-b - sqrt(discriminant)) / (2.0 * a);
    if (t_side > EPSILON)
    {
        double m = vec3_dot(ray->direction, cy->axis) * t_side + vec3_dot(oc, cy->axis);
        if (m >= -cy->height / 2.0 && m <= cy->height / 2.0)
        {
            rec->t = t_side;
            rec->point = ray_at(*ray, rec->t);
            rec->normal = vec3_normalize(vec3_sub(rec->point, vec3_add(cy->position, vec3_mul(cy->axis, m))));
            return (1);
        }
    }
    
    t_side = (-b + sqrt(discriminant)) / (2.0 * a);
    if (t_side > EPSILON)
    {
        double m = vec3_dot(ray->direction, cy->axis) * t_side + vec3_dot(oc, cy->axis);
        if (m >= -cy->height / 2.0 && m <= cy->height / 2.0)
        {
            rec->t = t_side;
            rec->point = ray_at(*ray, rec->t);
            rec->normal = vec3_normalize(vec3_sub(rec->point, vec3_add(cy->position, vec3_mul(cy->axis, m))));
            return (1);
        }
    }
    return (0);
}

int intersect_cylinder(t_ray *ray, t_cylinder *cy, t_hit_record *rec)
{
    t_hit_record side_hit;
    t_hit_record cap_hit;
    int side_found = intersect_sides(ray, cy, &side_hit);
    int cap_found = intersect_caps(ray, cy, &cap_hit.t, &cap_hit);
    
    if (side_found && cap_found)
    {
        if (side_hit.t < cap_hit.t)
            *rec = side_hit;
        else
            *rec = cap_hit;
        return (1);
    }
    else if (side_found)
    {
        *rec = side_hit;
        return (1);
    }
    else if (cap_found)
    {
        *rec = cap_hit;
        return (1);
    }
    
    return (0);
}

int intersect_cone(t_ray *ray, t_cone *cn, t_hit_record *rec)
{
    t_vec3  oc = vec3_sub(ray->origin, cn->position);
    double  cone_cos2 = pow(cn->radius / (cn->height / 2.0), 2.0);

    double a = vec3_dot(ray->direction, ray->direction) - (1 + cone_cos2) * pow(vec3_dot(ray->direction, cn->axis), 2);
    double b = 2.0 * (vec3_dot(ray->direction, oc) - (1 + cone_cos2) * vec3_dot(ray->direction, cn->axis) * vec3_dot(oc, cn->axis));
    double c = vec3_dot(oc, oc) - (1 + cone_cos2) * pow(vec3_dot(oc, cn->axis), 2);

    double discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0)
        return (0);

    double t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    double t2 = (-b + sqrt(discriminant)) / (2.0 * a);
    
    // Calcular m, la distancia a lo largo del eje del cono
    double m1 = vec3_dot(ray->direction, cn->axis) * t1 + vec3_dot(oc, cn->axis);
    double m2 = vec3_dot(ray->direction, cn->axis) * t2 + vec3_dot(oc, cn->axis);

    rec->t = -1.0;
    if (t1 > EPSILON && m1 > 0 && m1 < cn->height)
        rec->t = t1;
    if (t2 > EPSILON && m2 > 0 && m2 < cn->height)
    {
        if (rec->t < 0 || t2 < rec->t)
            rec->t = t2;
    }
    
    if (rec->t > EPSILON)
    {
        double m = vec3_dot(ray->direction, cn->axis) * rec->t + vec3_dot(oc, cn->axis);
        rec->point = ray_at(*ray, rec->t);
        rec->normal = vec3_normalize(vec3_sub(vec3_sub(rec->point, cn->position), vec3_mul(cn->axis, m * (1 + cone_cos2))));
        if (vec3_dot(rec->normal, ray->direction) > 0)
            rec->normal = vec3_mul(rec->normal, -1);
        return (1);
    }
    return (0);
}

int intersect_hyperboloid(t_ray *ray, t_hyperboloid *hp, t_hit_record *rec)
{
    t_vec3  oc;
    double  a, b, c;
    double  t, t1, t2, discriminant;
    t_vec3  u_v, w_v;
    double  dot_d_axis, dot_oc_axis;

    oc = vec3_sub(ray->origin, hp->position);
    dot_d_axis = vec3_dot(ray->direction, hp->axis);
    dot_oc_axis = vec3_dot(oc, hp->axis);

    // Calcular los vectores ortogonales al eje para la transformación
    if (fabs(hp->axis.x) > 0.9)
        u_v = vec3_init(0, 1, 0);
    else
        u_v = vec3_init(1, 0, 0);
    u_v = vec3_normalize(vec3_cross(u_v, hp->axis));
    w_v = vec3_normalize(vec3_cross(hp->axis, u_v));

    double d_u = vec3_dot(ray->direction, u_v);
    double d_w = vec3_dot(ray->direction, w_v);
    double oc_u = vec3_dot(oc, u_v);
    double oc_w = vec3_dot(oc, w_v);

    double z_limit = hp->height / 2.0;

    // Coeficientes de la ecuación cuadrática del hiperboloide
    a = (d_u * d_u) / (hp->radius_a * hp->radius_a) + (d_w * d_w) / (hp->radius_b * hp->radius_b) - (dot_d_axis * dot_d_axis);
    b = 2.0 * ((d_u * oc_u) / (hp->radius_a * hp->radius_a) + (d_w * oc_w) / (hp->radius_b * hp->radius_b) - (dot_d_axis * dot_oc_axis));
    c = (oc_u * oc_u) / (hp->radius_a * hp->radius_a) + (oc_w * oc_w) / (hp->radius_b * hp->radius_b) - (dot_oc_axis * dot_oc_axis);

    discriminant = b * b - 4.0 * a * c;
    if (discriminant < 0.0)
        return (0);

    t1 = (-b - sqrt(discriminant)) / (2.0 * a);
    t2 = (-b + sqrt(discriminant)) / (2.0 * a);
    
    // Se calcula la distancia a lo largo del eje para verificar si está dentro de la altura del hiperboloide
    double m1 = vec3_dot(ray_at(*ray, t1), hp->axis);
    double m2 = vec3_dot(ray_at(*ray, t2), hp->axis);

    if (t1 > EPSILON && m1 >= hp->position.z - z_limit && m1 <= hp->position.z + z_limit)
        t = t1;
    else if (t2 > EPSILON && m2 >= hp->position.z - z_limit && m2 <= hp->position.z + z_limit)
        t = t2;
    else
        return (0);
    
    rec->t = -1.0;
    if (t1 > EPSILON && m1 >= hp->position.z - z_limit && m1 <= hp->position.z + z_limit)
        rec->t = t1;
    
    if (t2 > EPSILON && m2 >= hp->position.z - z_limit && m2 <= hp->position.z + z_limit)
    {
        if (rec->t < 0 || t2 < rec->t)
            rec->t = t2;
    }

    if (rec->t < 0)
        return (0);
    
    rec->point = ray_at(*ray, rec->t);

    // Calcular la normal usando el gradiente de la ecuación
    t_vec3 point_relative = vec3_sub(rec->point, hp->position);
    double x_n = (2.0 * vec3_dot(point_relative, u_v)) / (hp->radius_a * hp->radius_a);
    double y_n = (2.0 * vec3_dot(point_relative, w_v)) / (hp->radius_b * hp->radius_b);
    double z_n = -2.0 * vec3_dot(point_relative, hp->axis);
    
    rec->normal = vec3_normalize(vec3_add(vec3_add(vec3_mul(u_v, x_n), vec3_mul(w_v, y_n)), vec3_mul(hp->axis, z_n)));
    
    // Asegurarse de que la normal apunte hacia la dirección del rayo incidente
    if (vec3_dot(rec->normal, ray->direction) > 0)
        rec->normal = vec3_mul(rec->normal, -1);

    return (1);
}

// Nuevo archivo para funciones de iluminación o utilidades
int is_in_shadow(t_ray *shadow_ray, t_scene *scene, t_light *light)
{
    t_hit_record    current_hit;
    t_object        **objects = (t_object **)scene->objects;
    double          light_dist;
    int             i;
    
    i = 0;
    // 1. Calcular la distancia desde el punto de impacto hasta la luz
    light_dist = vec3_length(vec3_sub(light->position, shadow_ray->origin));

    // 2. Iterar sobre todos los objetos para buscar una obstrucción
    while (objects[i] != NULL)
    {
        current_hit.t = -1.0;
        
        // Llamar a las funciones de intersección correspondientes
        if (objects[i]->type == SPHERE)
            intersect_sphere(shadow_ray, (t_sphere *)objects[i]->data, &current_hit);
        else if (objects[i]->type == PLANE)
            intersect_plane(shadow_ray, (t_plane *)objects[i]->data, &current_hit);
        else if (objects[i]->type == CYLINDER)
            intersect_cylinder(shadow_ray, (t_cylinder *)objects[i]->data, &current_hit);

        // 3. Si hay una colisión, verificar si está entre el punto y la luz
        if (current_hit.t > EPSILON && current_hit.t < light_dist)
        {
            return (1); // El punto está en sombra
        }
        i++;
    }
    return (0); // No hay ningún objeto obstruyendo la luz
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   clean_data_2.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 16:39:35 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 16:39:37 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

void	ft_free_str_array(char **arr)
{
	int	i;

	if (!arr)
		return ;
	i = 0;
	while (arr[i])
	{
		free(arr[i]);
		i++;
	}
	free(arr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   clean_data.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 16:39:35 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 16:39:37 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Libera UN objeto completo (material, data, y el propio objeto)
static void	free_one_object(t_object *obj)
{
	if (!obj)
		return ;
	if (obj->material)
	{
		if (obj->material->texture)
		{
			mlx_delete_texture(obj->material->texture);
			obj->material->texture = NULL;
		}
		free(obj->material);
		obj->material = NULL;
	}
	if (obj->data)
	{
		free(obj->data);
		obj->data = NULL;
	}
	free(obj);
}

void	free_scene_objects(t_scene *scene)
{
	size_t	i;

	if (!scene->objects)
		return ;
	i = 0;
	while (scene->objects[i])
	{
		free_one_object(scene->objects[i]);
		i++;
	}
	free(scene->objects);
	scene->objects = NULL;
}

static void	free_one_light(t_light *light)
{
	if (!light)
		return ;
	free(light);
}

void	free_scene_lights(t_scene *scene)
{
	size_t	i;

	if (!scene->lights)
		return ;
	i = 0;
	while (scene->lights[i])
	{
		free_one_light(scene->lights[i]);
		i++;
	}
	free(scene->lights);
	scene->lights = NULL;
}

void	cleanup_program(t_data *data)
{
	free_scene_objects(&data->scene);
	free_scene_lights(&data->scene);
	if (data->mlx.img.img_ptr)
		mlx_delete_image(data->mlx.mlx_ptr, data->mlx.img.img_ptr);
	if (data->mlx.mlx_ptr)
		mlx_terminate(data->mlx.mlx_ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_basics.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 16:55:35 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 16:55:37 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

void	init_scene(t_scene *scene)
{
	scene->width = 0;
	scene->height = 0;
	scene->has_camera = 0;
	scene->has_ambient = 0;
	scene->lights = NULL;
	scene->objects = NULL;
	scene->ambient.ratio = 0.0;
	scene->ambient.color = vec3_init(0, 0, 0);
	scene->camera.fov = 0.0;
	scene->camera.orientation = vec3_init(0, 0, 0);
	scene->camera.position = vec3_init(0, 0, 0);
}

t_material	*create_material(void)
{
	t_material	*material;

	material = malloc(sizeof(t_material));
	if (!material)
		ft_error_exit("Error: Memory allocation for material failed");
	ft_memset(material, 0, sizeof(t_material));
	material->specular.intensity = 0.0f;
	material->specular.shininess = 0;
	material->mirror_ratio = 0.0;
	material->has_checkerboard = 0;
	material->check_color1 = (t_vec3){0, 0, 0};
	material->check_color2 = (t_vec3){0, 0, 0};
	material->check_scale = 1.0;
	material->texture = NULL;
	material->has_texture = false;
	return (material);
}

t_object	*create_object(t_object_type type, void *data, t_vec3 color)
{
	t_object	*obj;

	obj = (t_object *)malloc(sizeof(t_object));
	if (!obj)
		ft_error_exit("Error: Memory allocation for object failed");
	ft_memset(obj, 0, sizeof(t_object));
	obj->type = type;
	obj->data = data;
	obj->color = color;
	obj->material = create_material();
	return (obj);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_elements.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 16:55:35 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 16:55:37 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Inicializa un rayo con un origen y una dirección.
// Asegura que la dirección esté normalizada.
t_ray	ray_init(t_vec3 origin, t_vec3 direction)
{
	t_ray	r;

	r.origin = origin;
	r.direction = vec3_normalize(direction);
	return (r);
}

// Inicializa una cámara.
t_camera	camera_init(t_vec3 position, t_vec3 orientation, double fov)
{
	t_camera	c;

	c.position = position;
	c.orientation = vec3_normalize(orientation);
	c.fov = fov;
	return (c);
}

// Inicializa la luz ambiental.
t_ambient_light	ambient_light_init(double ratio, t_vec3 color)
{
	t_ambient_light	al;

	al.ratio = ratio;
	al.color = color;
	return (al);
}

// Inicializa una luz puntual.
t_light	light_init(t_vec3 position, double brightness, t_vec3 color)
{
	t_light	l;

	l.position = position;
	l.brightness = brightness;
	l.color = color;
	return (l);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_figures.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 16:55:35 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 16:55:37 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Inicializa una esfera.
t_sphere	sphere_init(t_vec3 center, double radius)
{
	t_sphere	s;

	s.center = center;
	s.radius = radius;
	return (s);
}

// Inicializa un plano.
// Asegura que la normal esté normalizada.
t_plane	plane_init(t_vec3 position, t_vec3 normal)
{
	t_plane	p;

	p.position = position;
	p.normal = vec3_normalize(normal);
	return (p);
}

// Inicializa un cilindro.
// Asegura que el eje esté normalizado.
t_cylinder	cylinder_init(t_vec3 position, t_vec3 axis, double radius,
		double height)
{
	t_cylinder	cy;

	cy.position = position;
	cy.axis = vec3_normalize(axis);
	cy.radius = radius;
	cy.height = height;
	return (cy);
}

// Inicializa un cono.
// Asegura que el eje esté normalizado.
t_cone	cone_init(t_vec3 position, t_vec3 axis, double radius, double height)
{
	t_cone	cn;

	cn.position = position;
	cn.axis = vec3_normalize(axis);
	cn.radius = radius;
	cn.height = height;
	return (cn);
}

t_hyperboloid	hyperboloid_init(t_vec3 position, t_vec3 axis)
{
	t_hyperboloid	hp;

	hp.position = position;
	hp.axis = vec3_normalize(axis);
	hp.radius_a = 0.0;
	hp.radius_b = 0.0;
	hp.height = 0.0;
	return (hp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_vec.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 18:34:31 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 19:07:39 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Inicializa una estructura de vector 2D
t_vec2	vec2_init(double x, double y)
{
	t_vec2	vec;

	vec.x = x;
	vec.y = y;
	return (vec);
}

// Inicializa un vector 3D con los valores dados.
t_vec3	vec3_init(double x, double y, double z)
{
	t_vec3	v;

	v.x = x;
	v.y = y;
	v.z = z;
	return (v);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atof.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 15:39:15 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 15:47:34 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

static double	ft_atoi_part(const char **str, int *sign)
{
	double	result;

	result = 0.0;
	while (**str == ' ' || (**str >= 9 && **str <= 13))
		(*str)++;
	if (**str == '-')
	{
		*sign = -1;
		(*str)++;
	}
	else if (**str == '+')
		(*str)++;
	while (**str >= '0' && **str <= '9')
		result = result * 10.0 + (*((*str)++) - '0');
	return (result);
}

double	ft_atof(const char *str)
{
	double	result;
	double	fraction;
	int		sign;

	sign = 1;
	result = ft_atoi_part(&str, &sign);
	fraction = 1.0;
	if (*str == '.')
	{
		str++;
		while (*str >= '0' && *str <= '9')
		{
			fraction *= 0.1;
			result += (*str++ - '0') * fraction;
		}
	}
	return (result * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:38:41 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:28:33 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

// --- ft_atoi version for converting strings to integers --- //
int	ft_atoi(const char *nptr)
{
	int		result;
	size_t	i;
	int		sign;

	sign = 1;
	i = 0;
	result = 0;
	while (nptr[i] == 32 || (nptr[i] >= 9 && nptr[i] <= 13))
		i++;
	if (nptr[i] == '-')
	{
		sign = -1;
		i++;
	}
	else if (nptr[i] == '+')
		i++;
	while (ft_isdigit(nptr[i]))
	{
		result = result * 10 + (nptr[i] - '0');
		i++;
	}
	return (result * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi_long.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/24 16:08:38 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:09:52 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

// --- atoi version for long numbers --- //
long	ft_atol(const char *nptr)
{
	long	result;
	size_t	i;
	int		sign;

	sign = 1;
	i = 0;
	result = 0;
	while (nptr[i] == 32 || (nptr[i] >= 9 && nptr[i] <= 13))
		i++;
	if (nptr[i] == '-')
	{
		sign = -1;
		i++;
	}
	else if (nptr[i] == '+')
		i++;
	while (nptr[i] >= '0' && nptr[i] <= '9')
	{
		result = result * 10 + (nptr[i] - '0');
		i++;
	}
	return (result * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:38:10 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 12:16:30 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	size_t			i;
	unsigned char	*str;

	str = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		str[i] = 0;
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/18 06:17:42 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/23 13:30:55 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_calloc(size_t nmemb, size_t size)
{
	void	*pointer;

	if (nmemb && size > SIZE_MAX / nmemb)
		return (NULL);
	pointer = malloc(nmemb * size);
	if (!pointer)
		return (NULL);
	ft_bzero(pointer, nmemb * size);
	return (pointer);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_fabs.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 15:47:49 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 15:48:16 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

//fabs double
double	ft_fabs_double(double x)
{
	if (x < 0)
		return (-x);
	return (x);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_flags.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/22 14:06:23 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:33:01 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

/* %char hunter */
void	is_flag(char c, va_list args, int *length, int *flag)
{
	if (c == 'c')
		ft_putchar((char)va_arg(args, int), length, flag);
	else if (c == 's')
		ft_putstr(va_arg(args, char *), length, flag);
	else if (c == 'p')
		ft_pointer(va_arg(args, uintptr_t), length, flag);
	else if (c == 'u')
		ft_unsigned_putnbr(va_arg(args, unsigned int), length, flag);
	else if (c == 'i' || c == 'd')
		ft_putnbr(va_arg(args, int), length, flag);
	else if (c == 'x')
		ft_hex(va_arg(args, unsigned int), length, 'x', flag);
	else if (c == 'X')
		ft_hex(va_arg(args, unsigned int), length, 'X', flag);
	else if (c == '%')
		ft_putchar('%', length, flag);
}

int	ft_validation(char c)
{
	if (c == 'c' || c == 'i' || c == 's' || c == 'p'\
		|| c == 'u' || c == 'd' || c == 'x' || c == 'X' || c == '%')
		return (1);
	return (-1);
}

/* %u Print an unsigned decimal number (base 10). */
void	ft_unsigned_putnbr(unsigned int unsgined_nbr, int *length, int *flag)
{
	if (unsgined_nbr > 9)
		ft_unsigned_putnbr(unsgined_nbr / 10, length, flag);
	ft_putchar(unsgined_nbr % 10 + '0', length, flag);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_getenv.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/05 13:13:21 by rmarrero          #+#    #+#             */
/*   Updated: 2025/03/05 13:13:25 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

// -- gets environment variable value -- //
char	*ft_getenv(char *name, char **env)
{
	int		i;
	int		j;
	char	*sub;

	i = 0;
	while (env[i])
	{
		j = 0;
		while (env[i][j] && env[i][j] != '=')
			j++;
		sub = ft_substr(env[i], 0, j);
		if (ft_strcmp(sub, name) == 0)
		{
			free(sub);
			return (env[i] + j + 1);
		}
		free(sub);
		i++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:56:00 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 18:16:42 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_isalnum(int c)
{
	return (ft_isdigit(c) || ft_isalpha(c));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:52:42 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:27:37 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:39:01 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:28:05 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_isascii(int c)
{
	return (c >= 0 && c <= 127);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:20:00 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:28:26 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 18:00:10 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:44:19 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_isprint(int c)
{
	return (c >= 32 && c <= 126);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/23 13:27:02 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

static int	ft_intlen(int n)
{
	int	len;

	len = 0;
	if (n <= 0)
		len = 1;
	while (n != 0)
	{
		n /= 10;
		len++;
	}
	return (len);
}

void	ft_itoa_recursive(int n, char *str, int *i)
{
	if (n == -2147483648)
	{
		str[(*i)++] = '-';
		str[(*i)++] = '2';
		ft_itoa_recursive(147483648, str, i);
		return ;
	}
	if (n < 0)
	{
		str[(*i)++] = '-';
		n = -n;
	}
	if (n >= 10)
		ft_itoa_recursive(n / 10, str, i);
	str[(*i)++] = (n % 10) + '0';
}

char	*ft_itoa(int n)
{
	char	*str;
	int		i;

	str = (char *)malloc((ft_intlen(n) + 1) * sizeof(char));
	if (!str)
		return (NULL);
	i = 0;
	ft_itoa_recursive(n, str, &i);
	str[i] = '\0';
	return (str);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back_bonus.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:03:50 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*last_node;

	if (!lst || !new)
		return ;
	if (!*lst)
		*lst = new;
	else
	{
		last_node = ft_lstlast(*lst);
		last_node->next = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front_bonus.c                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <rmarrero@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/01 22:37:36 by rmarrero          #+#    #+#             */
/*   Updated: 2024/10/01 22:47:57 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (!lst || !new)
		return ;
	new->next = *lst;
	*lst = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear_bonus.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:48:28 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void*))
{
	t_list	*tmp;

	if (!lst || !del)
		return ;
	while (*lst)
	{
		tmp = (*lst)->next;
		ft_lstdelone(*lst, *del);
		*lst = tmp;
	}
	*lst = NULL;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone_bonus.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:47:06 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void*))
{
	if (lst && del)
	{
		(*del)(lst->content);
		free(lst);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:46:12 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	if (!lst || !f)
		return ;
	while (lst)
	{
		f(lst->content);
		lst = lst->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:45:15 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (!lst)
		return (NULL);
	while (lst->next)
		lst = lst->next;
	return (lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap_bonus.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:06:33 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*new_lst;
	t_list	*new_obj;

	if (!lst || !f || !del)
		return (NULL);
	new_lst = NULL;
	while (lst)
	{
		new_obj = ft_lstnew(f(lst->content));
		if (!new_obj)
		{
			ft_lstclear(&new_lst, del);
			return (NULL);
		}
		ft_lstadd_back(&new_lst, new_obj);
		lst = lst->next;
	}
	return (new_lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew_bonus.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <rmarrero@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/02 13:19:59 by rmarrero          #+#    #+#             */
/*   Updated: 2024/10/02 13:20:04 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

t_list	*ft_lstnew(void	*content)
{
	t_list	*element;

	element = (t_list *)malloc(sizeof(t_list));
	if (!element)
		return (NULL);
	element->content = content;
	element->next = NULL;
	return (element);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <rmarrero@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/01 23:06:40 by rmarrero          #+#    #+#             */
/*   Updated: 2024/10/02 13:11:18 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_lstsize(t_list *lst)
{
	int		count;
	t_list	*list;

	count = 0;
	list = lst;
	while (list)
	{
		count++;
		list = list->next;
	}
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/18 06:59:23 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:30:52 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	size_t				i;
	const unsigned char	*local_s;

	i = 0;
	local_s = (const unsigned char *)s;
	while (i < n)
	{
		if (local_s[i] == (unsigned char)c)
			return ((void *)&local_s[i]);
		i++;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/18 04:41:55 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:30:15 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	size_t				i;
	const unsigned char	*local_s1;
	const unsigned char	*local_s2;

	i = 0;
	local_s1 = (const unsigned char *)s1;
	local_s2 = (const unsigned char *)s2;
	while (i < n)
	{
		if (local_s1[i] != local_s2[i])
			return (local_s1[i] - local_s2[i]);
		i++;
	}
	return (0);
}
/*
int	main(void)
{
	char s1[]= "\0";
	char s2[]= "";
	printf("ft_ : %i\n", ft_memcmp(s1, s2, 6));
	printf("original: %i\n", memcmp(s1, s2, 6));
	return 0;
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/13 06:14:58 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:51:14 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	unsigned char		*local_dest;
	const unsigned char	*local_src;
	size_t				i;

	i = 0;
	local_dest = (unsigned char *)dest;
	local_src = (const unsigned char *)src;
	while (i < n)
	{
		local_dest[i] = local_src[i];
		i++;
	}
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/13 06:48:32 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/27 13:42:57 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	unsigned char		*local_dest;
	const unsigned char	*local_src;

	if (!dest || !src)
		return (NULL);
	local_dest = (unsigned char *)dest;
	local_src = (const unsigned char *)src;
	if (local_dest < local_src)
		ft_memcpy(dest, src, n);
	else
	{
		while (n--)
			local_dest[n] = local_src[n];
	}
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 18:22:10 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/17 00:02:32 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_memset(void *s, int c, size_t n)
{
	size_t			i;
	unsigned char	*local_s;

	local_s = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		local_s[i] = (unsigned char)c;
		i++;
	}
	return (s);
}
/*
int 	main(void)
{
	char str[] = "hola";
	printf("antes: %s\n", str);
	ft_memset(str, 1, 2);
	printf("despues: %s\n", str);
}
*/		
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/22 14:06:47 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:39:25 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

/* dejare el ft_printf para manejo de errores 
 * etc y llamar a las funciones finales */
int	ft_printf(const char *str, ...)
{
	int		i;
	va_list	args;
	int		length;
	int		flag;

	i = -1;
	length = 0;
	flag = 1;
	va_start(args, str);
	while (str[++i])
	{
		if (str[i] == '%' && str[++i])
		{
			if (ft_validation(str[i]) == 1)
				is_flag(str[i], args, &length, &flag);
			else
				return (-1);
		}
		else
			ft_putchar(str[i], &length, &flag);
		if (flag == -1)
			return (-1);
	}
	return (va_end(args), length);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/22 14:07:36 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:27:51 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

/* %c Prints a single character. */
void	ft_putchar(char character, int *length, int *flag)
{
	if (write(1, &character, 1) == -1)
	{
		(*flag) = -1;
		return ;
	}
	(*length)++;
}

/* %s Prints a string (as defined by default in C) */
void	ft_putstr(char *args, int *length, int *flag)
{
	size_t	i;

	i = 0;
	if (!args)
	{
		if (write(1, "(null)", 6) == -1)
			(*flag) = -1;
		(*length) += 6;
		return ;
	}
	while (args[i])
	{
		ft_putchar(args[i], length, flag);
		i++;
	}
}

/* 
- %d Prints a decimal number (base 10).
- %i Prints an integer in base 10.
*/
void	ft_putnbr(int nbr, int *length, int *flag)
{
	if (nbr == -2147483648)
	{
		if (write(1, "-2147483648", 11) == -1)
			(*flag) = -1;
		(*length) += 11;
		return ;
	}
	if (nbr < 0)
	{
		ft_putchar('-', length, flag);
		ft_putnbr(nbr * -1, length, flag);
	}
	else
	{
		if (nbr > 9)
			ft_putnbr(nbr / 10, length, flag);
		ft_putchar(nbr % 10 + '0', length, flag);
	}
}

/* %p The void pointer * given as argument is printed in hexadecimal format. */
void	ft_pointer(uintptr_t pointer, int *length, int *flag)
{
	char	str_hex[17];
	int		i;
	char	*hex;

	hex = "0123456789abcdef";
	i = 0;
	if (pointer == 0)
	{
		if (write(1, "(nil)", 5) == -1)
			(*flag) = -1;
		(*length) += 5;
		return ;
	}
	if (write(1, "0x", 2) == -1)
		return ((*flag) = -1, (void)0);
	(*length) += 2;
	while (pointer != 0)
	{
		str_hex[i++] = hex[pointer % 16];
		pointer = pointer / 16;
	}
	while (i--)
		ft_putchar(str_hex[i], length, flag);
}

/* %x Prints a hexadecimal number (base 16) in lower case.
%X Prints a hexadecimal number (base 16) in uppercase. */
void	ft_hex(unsigned int nbr, int *length, char x, int *flag)
{
	char	str_hex[17];
	char	*hex;
	int		i;

	if (x == 'X')
		hex = "0123456789ABCDEF";
	else
		hex = "0123456789abcdef";
	i = 0;
	if (nbr == 0)
	{
		ft_putchar('0', length, flag);
		return ;
	}
	while (nbr != 0)
	{
		str_hex[i] = hex[nbr % 16];
		nbr = nbr / 16;
		i++;
	}
	while (i--)
		ft_putchar(str_hex[i], length, flag);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:52:58 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:53:14 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	write(fd, &c, 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:41:15 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/29 11:38:13 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	if (s == NULL)
		return ;
	write(fd, s, ft_strlen(s));
	write(fd, "\n", 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:51:31 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:52:26 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_putnbr_fd(int n, int fd)
{
	char	digit;

	if (n == -2147483648)
	{
		write(fd, "-2147483648", 11);
		return ;
	}
	if (n < 0)
	{
		write(fd, "-", 1);
		n = -n;
	}
	if (n >= 10)
		ft_putnbr_fd(n / 10, fd);
	digit = (n % 10) + '0';
	write(fd, &digit, 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:36:14 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/29 16:23:53 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	if (s == NULL)
		return ;
	write(fd, s, ft_strlen(s));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_realloc.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/13 06:14:58 by rmarrero          #+#    #+#             */
/*   Updated: 2025/06/30 15:53:27 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	*ft_realloc(void *ptr, size_t new_size)
{
	void	*new_ptr;

	if (new_size == 0)
	{
		free(ptr);
		return (NULL);
	}
	if (!ptr)
		return (malloc(new_size));
	new_ptr = malloc(new_size);
	if (!new_ptr)
		return (NULL);
	ft_memcpy(new_ptr, ptr, new_size);
	free(ptr);
	return (new_ptr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/10 23:52:13 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

static char	*ft_strncpy(char *dest, const char *src, unsigned int n)
{
	unsigned int	i;

	i = 0;
	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

static int	count_words(const char *s, char c)
{
	int	count;

	count = 0;
	while (*s)
	{
		while (*s == c || *s == '\t')
			s++;
		if (*s)
		{
			count++;
			while (*s && *s != c && *s != '\t')
				s++;
		}
	}
	return (count);
}

static char	*ft_word_dup(const char *s, char c)
{
	unsigned int	len;
	char			*word;

	len = 0;
	while (s[len] && s[len] != c && s[len] != '\t')
		len++;
	word = (char *)malloc(sizeof(char) * (len + 1));
	if (!word)
		return (NULL);
	ft_strncpy(word, s, len);
	word[len] = '\0';
	return (word);
}

static void	ft_free_split(char **split)
{
	int	i;

	i = 0;
	while (split[i])
	{
		free(split[i]);
		i++;
	}
	free(split);
}

char	**ft_split(char const *s, char c)
{
	int		words;
	char	**split;
	int		i;

	i = 0;
	words = count_words(s, c);
	split = (char **)malloc(sizeof(char *) * (words + 1));
	if (!split)
		return (NULL);
	while (*s)
	{
		while (*s == c || *s == '\t')
			s++;
		if (*s)
		{
			split[i] = ft_word_dup(s, c);
			if (!split[i++])
				return (ft_free_split(split), NULL);
			while (*s && *s != c && *s != '\t')
				s++;
		}
	}
	return (split[i] = NULL, split);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_sqrt.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/24 16:10:29 by rmarrero          #+#    #+#             */
/*   Updated: 2025/01/24 16:11:13 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_sqrt(int nb)
{
	int	low;
	int	high;
	int	mid;

	if (nb < 0)
		return (0);
	if (nb == 0 || nb == 1)
		return (nb);
	low = 0;
	high = nb;
	mid = (low + high) / 2;
	while (low <= high)
	{
		mid = (low + high) / 2;
		if (mid * mid == nb)
			return (mid);
		else if (mid * mid < nb)
			low = mid + 1;
		else
			high = mid - 1;
	}
	if ((low * low - nb) < (nb - high * high))
		return (low);
	return (high);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/13 12:40:32 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/18 06:39:35 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*ft_strchr(const char *s, int c)
{
	const unsigned char	*local_s;
	size_t				i;

	i = 0;
	local_s = (const unsigned char *)s;
	while (local_s[i])
	{
		if (local_s[i] == (unsigned char)c)
			return ((char *)&s[i]);
		i++;
	}
	if ((unsigned char)c == '\0')
		return ((char *)&s[i]);
	return (NULL);
}
/*
int	main(void)
{
    char str[] = "hola mundo new world";
    char c = 'u';

    printf("%s", ft_strchr(str, c));
    return 0;
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 15:39:15 by rmarrero          #+#    #+#             */
/*   Updated: 2025/03/03 12:14:41 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_strcmp(const char *s1, const char *s2)
{
	int	i;

	i = 0;
	while (s1[i] && s2[i])
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/10 15:46:22 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/13 12:59:38 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*ft_strdup(const char *s1)
{
	size_t	i;
	char	*duplicado;

	if (s1 == NULL)
		return (NULL);
	duplicado = (char *)malloc((ft_strlen(s1) + 1) * sizeof(char));
	if (!duplicado)
		return (NULL);
	i = 0;
	while (s1[i])
	{
		duplicado[i] = s1[i];
		i++;
	}
	duplicado[i] = '\0';
	return (duplicado);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:28:38 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/28 16:35:40 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char*))
{
	unsigned int	i;

	if (s == NULL || f == NULL)
		return ;
	i = 0;
	while (s[i])
	{
		(*f)(i, &s[i]);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/19 12:24:10 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:20:24 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*dest;
	int		i;
	int		j;

	if (s1 == NULL && s2 == NULL)
		return (NULL);
	if (s1 == NULL)
		return (ft_strdup(s2));
	if (s2 == NULL)
		return (ft_strdup(s1));
	dest = (char *)malloc((ft_strlen(s1) + ft_strlen(s2) + 1) * sizeof(char));
	if (!dest)
		return (NULL);
	i = 0;
	j = 0;
	while (s1[i])
		dest[j++] = s1[i++];
	i = 0;
	while (s2[i])
		dest[j++] = s2[i++];
	dest[j] = '\0';
	return (dest);
}
/*
int	main(void)
{
		char s1[] = "hola ";
		char s2[] = "mundo";
		printf("%s", ft_strjoin(s1, s2));
		return 0;
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/11 18:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/15 20:52:37 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

size_t	ft_strlcat(char *dest, char *src, unsigned int size)
{
	size_t	i;
	size_t	dlen;
	size_t	slen;

	i = 0;
	dlen = ft_strlen(dest);
	slen = ft_strlen(src);
	if (size <= dlen)
		return (slen + size);
	while (src [i] && i < size - dlen - 1)
	{
		dest[dlen + i] = src[i];
		i++;
	}
	dest[dlen + i] = '\0';
	return (dlen + slen);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:56:18 by rmarrero          #+#    #+#             */
/*   Updated: 2024/11/23 13:01:34 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

size_t	ft_strlcpy(char *dest, const char *src, size_t	size)
{
	size_t	i;
	size_t	length_src;

	i = 0;
	length_src = ft_strlen(src);
	if (size > 0)
	{
		while (src[i] && i < (size - 1))
		{
			dest[i] = src[i];
			i++;
		}
		dest[i] = '\0';
	}
	return (length_src);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:36:43 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/13 12:34:31 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

size_t	ft_strlen(const char *str)
{
	int	length;

	length = 0;
	while (str[length])
		length++;
	return (length);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 13:34:07 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/27 15:49:34 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	unsigned int	i;
	char			*result;

	if (!s || !f)
		return (NULL);
	result = (char *)malloc((ft_strlen(s) + 1) * sizeof(char));
	if (!result)
		return (NULL);
	i = 0;
	while (s[i])
	{
		result[i] = (*f)(i, s[i]);
		i++;
	}
	result[i] = '\0';
	return (result);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/17 07:32:01 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/29 11:27:27 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t	i;

	i = 0;
	while (i < n && (s1[i] || s2[i]))
	{
		if (s1[i] != s2[i])
			return ((unsigned char)s1[i] - (unsigned char)s2[i]);
		i++;
	}
	return (0);
}
/*
int main(void)
{
	char	str1[] = "abcav";
	char	str2[] = "abca";
	printf("%i", ft_strncmp(str1, str2, 4));
	return 0;
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/17 23:29:06 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/18 06:40:26 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	i;
	size_t	j;

	if (!big)
		return (0);
	if (*little == '\0')
		return ((char *)big);
	i = 0;
	while (big[i] && i < len)
	{
		j = 0;
		while (big[i + j] == little[j] && (i + j) < len)
		{
			if (little[j + 1] == '\0')
				return ((char *)&big[i]);
			j++;
		}
		i++;
	}
	return (NULL);
}
/*
int main(void) {
    char big[] = "Hola mundo texto  nuevo";
    char littel[] = "texto";
    printf("%s\n", ft_strnstr(big, littel, 25));
    return 0;
}
*/	
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/12 17:43:29 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/29 11:50:22 by root             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*ft_strrchr(const char *str, char c)
{
	const unsigned char		*local_str;
	size_t					len;

	len = ft_strlen(str);
	local_str = (const unsigned char *)str;
	if ((unsigned char)c == '\0')
		return ((char *)&local_str[len]);
	while (len > 0)
	{
		len--;
		if (local_str[len] == (unsigned char)c)
			return ((char *)&local_str[len]);
	}
	return (NULL);
}
/*
int main()
{
    char str[] = "www.holamundo.com";
    char c = '.';

    printf("%s", ft_strrchr(str,c));

    return 0;
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 12:26:57 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 13:31:11 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strtrim(char const *s1, char const *set)
{
	size_t	i;
	size_t	j;
	size_t	k;
	char	*str;

	if (!s1 || !set)
		return (NULL);
	i = 0;
	j = ft_strlen(s1);
	while (s1[i] && ft_strchr(set, s1[i]))
		i++;
	while (j > i && ft_strchr(set, s1[j - 1]))
		j--;
	str = (char *)malloc((j - i + 1) * sizeof(char));
	if (!str)
		return (NULL);
	k = 0;
	while (k < (j - i))
	{
		str[k] = s1[i + k];
		k++;
	}
	str[k] = '\0';
	return (str);
}
/*
int main()
{
    char s1[] = "sdhola mdsdunsdto csomso ddestdas";
    char set[] = "sd";
    char *result = ft_strtrim(s1, set);
    printf("%s\n", result);
    free(result);
    return 0;
}
*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/18 19:06:56 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/26 12:35:50 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"
//#include <stdio.h>
//#include <stdlib.h>

/*
void    ft_bzero(void *s, size_t n);
size_t  ft_strlen(const char *str);
char    *ft_strdup(const char *s1);
void    *ft_calloc(size_t count, size_t size);
*/

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	size_t	i;
	char	*pointer;

	if (!s)
		return (NULL);
	if (start > ft_strlen(s))
		return (ft_strdup(""));
	if (len > ft_strlen(s + start))
		len = ft_strlen(s + start);
	pointer = ft_calloc(len + 1, sizeof(char));
	if (!pointer)
		return (NULL);
	i = 0;
	while (i < len)
	{
		pointer[i] = s[start + i];
		i++;
	}
	return (pointer);
}
/*
int	main(void)
{
	char s[] = "Hi new world, new testing text for this function.";
	printf("new testing: %s\n", ft_substr(s, 14, 11));
	return (0);
}

void    ft_bzero(void *s, size_t n)
{
        size_t                  i;
        unsigned char   *str;

        str = (unsigned char *)s;
        i = 0;
        while (i < n)
        {
                str[i] = '\0';
                i++;
        }
}

size_t  ft_strlen(const char *str)
{
        int     length;

        length = 0;
        while (str[length])
                length++;
        return (length);
}
char    *ft_strdup(const char *s1)
{
        size_t  i;
        char    *duplicado;

        i = 0;
        duplicado = (char *)malloc((ft_strlen(s1) + 1) * sizeof(char));
        if (!duplicado)
                return (NULL);
        while (s1[i])
        {
                duplicado[i] = s1[i];
                i++;
        }
        duplicado[i] = '\0';
        return (duplicado);
}

void    *ft_calloc(size_t count, size_t size)
{
        size_t                  i;
        unsigned char   *pointer;

        i = 0;
        pointer = malloc(count * size);
        if (!pointer)
                return (NULL);
        ft_bzero(pointer, count * size);
        return (pointer);
}
*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/17 08:25:40 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/18 06:32:03 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_tolower(int c)
{
	unsigned char	local_c;

	local_c = (unsigned char)c;
	while (local_c >= 'A' && local_c <= 'Z')
		return (c += 32);
	return (c);
}
/*
int main(void)
{
	char str[] = "HOLA MUNDO";
	int i = 0;

	while (str[i])
	{
		printf("%c", ft_tolower(str[i]));
		i++;
	}
}*/	
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/17 08:12:23 by rmarrero          #+#    #+#             */
/*   Updated: 2024/09/18 06:32:54 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c -= 32);
	return (c);
}
/*
int main(void)
{
	char	str[] = "hola";
	int 	i = 0;
	while (str[i])
	{
		printf("%c", ft_toupper(str[i]));
		i++;
	}
}*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_bonus.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <rmarrero@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/01 21:11:16 by rmarrero          #+#    #+#             */
/*   Updated: 2024/10/28 20:58:15 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

char	*get_next_line(int fd)
{
	static t_list	*list[4096];
	char			*line;

	line = NULL;
	if (BUFFER_SIZE < 0 || fd < 0)
		return (NULL);
	create_and_append(list, fd);
	line = malloc(get_len(list[fd]) + 1);
	if (!(list[fd]) || !(line))
		return (free(line), NULL);
	get_copy(list[fd], line);
	get_clear_remaining_data(&list[fd]);
	return (line);
}

void	get_free_list(t_list **list, t_list *replace, char *buffer)
{
	t_list	*tmp;

	if (NULL == *list)
		return ;
	while (*list)
	{
		tmp = (*list)->next;
		free((*list)->content);
		free(*list);
		*list = tmp;
	}
	*list = NULL;
	if (replace->content[0])
		*list = replace;
	else
	{
		free(buffer);
		free(replace);
	}
}

void	get_clear_remaining_data(t_list **list)
{
	char	*buffer;
	t_list	*last;
	t_list	*replace;
	int		i;
	int		j;

	i = 0;
	j = 0;
	buffer = malloc(BUFFER_SIZE + 1);
	replace = malloc(sizeof(t_list));
	if (!(buffer) || !(replace))
		return ;
	last = ft_lstlast(*list);
	while (last->content[i] && last->content[i] != '\n')
		++i;
	while (last->content[i] && last->content[++i])
		buffer[j++] = last->content[i];
	buffer[j] = '\0';
	replace->content = buffer;
	replace->next = NULL;
	get_free_list(list, replace, buffer);
}
//comand > 
//gcc -o get_next_line main.c get_next_line.c get_next_line_utils.c -I./includes
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils_bonus.c                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <rmarrero@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/27 23:07:54 by rmarrero          #+#    #+#             */
/*   Updated: 2024/10/12 23:10:36 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "libft.h"

int	get_len(t_list *list)
{
	int	i;
	int	len;

	if (!list)
		return (0);
	len = 0;
	while (list)
	{
		i = 0;
		while (list->content[i])
		{
			if (list->content[i] == '\n')
				return (++len);
			++i;
			++len;
		}
		list = list->next;
	}
	return (len);
}

void	get_copy(t_list *list, char *line)
{
	int	i;
	int	j;

	if (!list)
		return ;
	j = 0;
	while (list)
	{
		i = 0;
		while (list->content[i])
		{
			if (list->content[i] == '\n')
			{
				line[j++] = '\n';
				line[j] = '\0';
				return ;
			}
			line[j++] = list->content[i++];
		}
		list = list->next;
	}
	line[j] = '\0';
}

int	find_new_line(t_list *list)
{
	int	i;

	if (!list)
		return (0);
	while (list)
	{
		i = 0;
		while (list->content[i] && i < BUFFER_SIZE)
		{
			if (list->content[i] == '\n')
				return (1);
			i++;
		}
		list = list->next;
	}
	return (0);
}

void	create_and_append(t_list **list, int fd)
{
	t_list	*new_node;
	t_list	*last_node;
	char	*buffer;
	int		bytes_read;

	while (!find_new_line(list[fd]))
	{
		buffer = malloc(BUFFER_SIZE + 1);
		bytes_read = read(fd, buffer, BUFFER_SIZE);
		if (!(buffer) || bytes_read <= 0)
			return (free(buffer), (void)0);
		buffer[bytes_read] = '\0';
		new_node = malloc(sizeof(t_list));
		if (!new_node)
			return ;
		new_node->content = buffer;
		new_node->next = NULL;
		if (!list[fd])
			list[fd] = new_node;
		else
		{
			last_node = ft_lstlast(list[fd]);
			last_node->next = new_node;
		}
	}
}
#include "../include/minirt.h"

int init_data(t_data *data)
{
    // Inicializar todos los campos a cero, previene valores basura.
    init_scene(&data->scene);
    data->scene.width = 1920;
    data->scene.height = 1080;
    data->num_threads = get_num_processors();
    data->rendered_rows = 0;
    if (pthread_mutex_init(&data->progress_mutex, NULL) != 0)
    {
        ft_printf("MiniRT: Error: Bad Init Mutex\n");
        return (1);
    }
    return (0);
}

int main(int argc, char **argv)
{
    t_data data;

    if (argc != 2)
        return (ft_printf("Usage: ./minirt <scene.rt>\n"), 1);

    if (init_data(&data) != 0)
        return (1);

    parse_rt_file(&data.scene, argv[1]);

    if (mlx_setup(&data) != 0)
       return (cleanup_program(&data), 1);

    render_threaded(&data);

    // Los hooks se registran usando el puntero a la instancia de mlx
    mlx_key_hook(data.mlx.mlx_ptr, key_hook, &data);

    // Iniciar el bucle de Minilibx
    mlx_loop(data.mlx.mlx_ptr);

    cleanup_program(&data);

    return (0);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/12 22:24:37 by jaacosta          #+#    #+#             */
/*   Updated: 2025/08/12 22:24:40 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

int	open_filename(const char *filename)
{
	int	fd;

	fd = open(filename, O_RDONLY);
	if (fd < 0)
	{
		perror("Error: cannot open the file");
		exit(1);
	}
	return (fd);
}

void	validate_file(int fd, const char *file_name)
{
	char	buffer[1];
	ssize_t	b_read;

	b_read = read(fd, buffer, 1);
	if (b_read < 0)
	{
		if (errno == EISDIR)
			printf("Error: %s is not a file, is a directory\n", file_name);
		else
			perror("Error: cannot read the file");
		close(fd);
		exit(1);
	}
	else if (b_read == 0)
	{
		printf("Error: the file %s is empty\n", file_name);
		close(fd);
		exit(1);
	}
}

static void	parse_line(t_scene *scene, char *line)
{
	char	**tokens;

	tokens = ft_split(line, ' ');
	if (!tokens)
		ft_error_exit("MiniRT: Error: ft_split failed");
	if (ft_strcmp(tokens[0], "A") == 0)
		parse_ambient(scene, tokens);
	else if (ft_strcmp(tokens[0], "C") == 0)
		parse_camera(scene, tokens);
	else if (ft_strcmp(tokens[0], "L") == 0)
		parse_light(scene, tokens);
	else if (ft_strcmp(tokens[0], "sp") == 0)
		parse_sphere(scene, tokens);
	else if (ft_strcmp(tokens[0], "pl") == 0)
		parse_plane(scene, tokens);
	else if (ft_strcmp(tokens[0], "cy") == 0)
		parse_cylinder(scene, tokens);
	else if (ft_strcmp(tokens[0], "cn") == 0)
		parse_cone(scene, tokens);
	else if (ft_strcmp(tokens[0], "pb") == 0)
		parse_paraboloid(scene, tokens);
	else if (ft_strcmp(tokens[0], "hp") == 0)
		parse_hyperboloid(scene, tokens);
	ft_free_str_array(tokens);
}

static int	open_and_validate_file(const char *file_path)
{
	int	fd;

	if (!valid_extension_rt(file_path))
		ft_error_exit("MiniRT: Error: the file must be of type '*.rt'");
	fd = open_filename(file_path);
	validate_file(fd, file_path);
	close(fd);
	fd = open_filename(file_path);
	return (fd);
}

void	parse_rt_file(t_scene *scene, const char *file_path)
{
	int		fd;
	char	*line;

	fd = open_and_validate_file(file_path);
	line = get_next_line(fd);
	while (line != NULL)
	{
		parse_line(scene, line);
		free(line);
		line = get_next_line(fd);
	}
	close(fd);
	if (!scene->has_camera || !scene->has_ambient)
		ft_error_exit("MiniRT: Error: A camera and \
            ambient light are required.");
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils_materials_2.c                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 23:05:56 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/03 23:05:58 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Nuevo parser para Hiperboloide (hp)
void	parse_hyperboloid(t_scene *scene, char **tokens)
{
	t_hyperboloid	*hb;
	t_object		*obj;

	if (ft_strarr_len(tokens) < 7)
		ft_error_exit("Error: Hyperboloid format invalid");
	hb = malloc(sizeof(t_hyperboloid));
	if (!hb)
		ft_error_exit("Error: Memory allocation failed");
	hb->position = parse_vec3(tokens[1]);
	hb->axis = parse_vec3_normalized(tokens[2]);
	hb->radius_a = parse_positive_double(tokens[3]);
	hb->radius_b = parse_positive_double(tokens[4]);
	hb->height = parse_positive_double(tokens[5]);
	obj = create_object(HYPERBOLOID, hb, parse_vec3_color(tokens[6]));
	apply_object_modifiers(obj, tokens, 7);
	add_object_to_scene(scene, obj);
}

// Parser de Cámara (C)
void	parse_camera(t_scene *scene, char **tokens)
{
	if (scene->has_camera)
		ft_error_exit("Error: Multiple cameras not allowed");
	if (ft_strarr_len(tokens) != 4)
		ft_error_exit("Error: Camera format invalid");
	scene->camera.position = parse_vec3(tokens[1]);
	scene->camera.orientation = parse_vec3_normalized(tokens[2]);
	scene->camera.fov = parse_fov(tokens[3]);
	scene->has_camera = 1;
}

// Parser de Luz (L)
void	parse_light(t_scene *scene, char **tokens)
{
	t_light	*light;
	t_vec3	color;
	double	brightness;

	if (ft_strarr_len(tokens) != 4)
		ft_error_exit("Error: Light format invalid");
	light = (t_light *)malloc(sizeof(t_light));
	if (!light)
		ft_error_exit("Error: Memory allocation failed");
	light->position = parse_vec3(tokens[1]);
	brightness = ft_atod(tokens[2]);
	if (brightness < 0.0 || brightness > 1.0)
		ft_error_exit("Error: brightness must be betwen 0.0 and 1.0");
	light->brightness = brightness;
	color = parse_vec3_color(tokens[3]);
	light->color = color;
	add_light_to_scene(scene, light);
}

// Parser de Luz Ambiental (A)
void	parse_ambient(t_scene *scene, char **tokens)
{
	t_vec3	color;
	double	ratio;

	if (scene->has_ambient)
		ft_error_exit("Error: Multiple ambient lights not allowed");
	if (ft_strarr_len(tokens) != 3)
		ft_error_exit("Error: Ambient light format invalid");
	ratio = ft_atod(tokens[1]);
	if (ratio < 0.0 || ratio > 1.0)
		ft_error_exit("Error: Ambient ratio must be betwen 0.0 and 1.0");
	color = parse_vec3_color(tokens[2]);
	scene->ambient.ratio = ratio;
	scene->ambient.color = color;
	scene->has_ambient = 1;
}

void	ft_error_exit(const char *msg)
{
	ft_putendl_fd((char *)msg, 2);
	exit(EXIT_FAILURE);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_elements.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/12 22:24:49 by jaacosta          #+#    #+#             */
/*   Updated: 2025/08/12 22:24:53 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../include/minirt.h"

// Parser de Esfera (sp)
void	parse_sphere(t_scene *scene, char **tokens)
{
	t_sphere	*sp;
	t_object	*obj;

	if (ft_strarr_len(tokens) < 4)
		ft_error_exit("Error: Sphere format invalid");
	sp = (t_sphere *)malloc(sizeof(t_sphere));
	if (!sp)
		ft_error_exit("Error: Memory allocation failed");
	sp->center = parse_vec3(tokens[1]);
	sp->radius = parse_positive_double(tokens[2]);
	obj = create_object(SPHERE, sp, parse_vec3_color(tokens[3]));
	apply_object_modifiers(obj, tokens, 4);
	add_object_to_scene(scene, obj);
}

// Parser de Plano (pl)
void	parse_plane(t_scene *scene, char **tokens)
{
	t_plane		*pl;
	t_object	*obj;

	if (ft_strarr_len(tokens) < 4)
		ft_error_exit("Error: Plane format invalid");
	pl = (t_plane *)malloc(sizeof(t_plane));
	if (!pl)
		ft_error_exit("Error: Memory allocation failed");
	pl->position = parse_vec3(tokens[1]);
	pl->normal = parse_vec3_normalized(tokens[2]);
	obj = create_object(PLANE, pl, parse_vec3_color(tokens[3]));
	apply_object_modifiers(obj, tokens, 4);
	add_object_to_scene(scene, obj);
}

// Parser de Cilindro (cy)
void	parse_cylinder(t_scene *scene, char **tokens)
{
	t_cylinder	*cy;
	t_object	*obj;

	if (ft_strarr_len(tokens) < 6)
		ft_error_exit("Error: Cylinder format invalid");
	cy = (t_cylinder *)malloc(sizeof(t_cylinder));
	if (!cy)
		ft_error_exit("Error: Memory allocation failed");
	cy->position = parse_vec3(tokens[1]);
	cy->axis = parse_vec3_normalized(tokens[2]);
	cy->radius = parse_positive_double(tokens[3]);
	cy->height = parse_positive_double(tokens[4]);
	obj = create_object(CYLINDER, cy, parse_vec3_color(tokens[5]));
	apply_object_modifiers(obj, tokens, 6);
	add_object_to_scene(scene, obj);
}

// Parser de Cono (cn)
void	parse_cone(t_scene *scene, char **tokens)
{
	t_cone		*cn;
	t_object	*obj;

	if (ft_strarr_len(tokens) < 6)
		ft_error_exit("Error: Cone format invalid");
	cn = malloc(sizeof(t_cone));
	if (!cn)
		ft_error_exit("Error: Memory allocation failed");
	cn->position = parse_vec3(tokens[1]);
	cn->axis = parse_vec3_normalized(tokens[2]);
	cn->radius = parse_positive_double(tokens[3]);
	cn->height = parse_positive_double(tokens[4]);
	obj = create_object(CONE, cn, parse_vec3_color(tokens[5]));
	apply_object_modifiers(obj, tokens, 6);
	add_object_to_scene(scene, obj);
}

// Parser de Paraboloide (pb) ->bonus
void	parse_paraboloid(t_scene *scene, char **tokens)
{
	t_parab		*pb;
	t_object	*obj;

	if (ft_strarr_len(tokens) < 6)
		ft_error_exit("Error: Cone format invalid");
	pb = malloc(sizeof(t_parab));
	if (!pb)
		ft_error_exit("Error: Memory allocation failed");
	pb->position = parse_vec3(tokens[1]);
	pb->axis = parse_vec3_normalized(tokens[2]);
	pb->focal_lenght = parse_positive_double(tokens[3]);
	pb->height = parse_positive_double(tokens[4]);
	obj = create_object(PARABOLOID, pb, parse_vec3_color(tokens[5]));
	apply_object_modifiers(obj, tokens, 6);
	add_object_to_scene(scene, obj);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils_2.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/12 22:25:08 by jaacosta          #+#    #+#             */
/*   Updated: 2025/08/12 22:25:11 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Nueva versión: esta función devuelve 1 si es un entero válido, 0 si no.
int	validate_is_integer(char *str)
{
	int	i;

	i = 0;
	if (!str || str[0] == '\0')
		return (0);
	while (str[i])
	{
		if (!ft_isdigit((unsigned char)str[i]))
			return (0);
		i++;
	}
	return (1);
}

// Nueva versión: ahora la lógica es lineal y segura
double	validate_color_component(char *str)
{
	char	*trimmed;
	int		v;

	trimmed = ft_strtrim(str, " \r\t\n");
	if (!trimmed)
		ft_error_exit("MiniRT: Error: allocating memory in color parser");
	if (!validate_is_integer(trimmed))
	{
		free(trimmed);
		ft_error_exit("MiniRT: Error: color components must be valid integers");
	}
	if (trimmed[0] == '\0')
	{
		free(trimmed);
		ft_error_exit("MiniRT: Error: color component is empty");
	}
	v = ft_atoi(trimmed);
	if (v < 0 || v > 255)
	{
		free(trimmed);
		ft_error_exit("MiniRT: Error: Color values must be in range 0–255");
	}
	free(trimmed);
	return (v / 255.0);
}

int	ft_strarr_len(char **arr)
{
	int	len;

	len = 0;
	if (!arr)
		return (0);
	while (arr[len])
		len++;
	return (len);
}

static double	parse_integer_part(const char **str, int *sign)
{
	double	result;

	result = 0.0;
	if (**str == '-')
	{
		*sign = -1;
		(*str)++;
	}
	while (**str && **str != '.')
	{
		result = result * 10.0 + (**str - '0');
		(*str)++;
	}
	return (result);
}

double	ft_atod(const char *str)
{
	double	result;
	double	decimal_part;
	int		sign;

	sign = 1;
	result = parse_integer_part(&str, &sign);
	decimal_part = 1.0;
	if (*str == '.')
	{
		str++;
		while (*str)
		{
			decimal_part /= 10.0;
			result = result + (*str - '0') * decimal_part;
			str++;
		}
	}
	return (result * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils_3.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/12 22:25:08 by jaacosta          #+#    #+#             */
/*   Updated: 2025/08/12 22:25:11 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Añade un objeto de forma dinámica a la escena
void	add_object_to_scene(t_scene *scene, t_object *obj)
{
	int			count;
	t_object	**new_objects;

	count = 0;
	if (scene->objects)
	{
		while (((t_object **)scene->objects)[count])
			count++;
	}
	new_objects = (t_object **)malloc(sizeof(t_object *) * (count + 2));
	if (!new_objects)
		ft_error_exit("MiniRT: Error: Malloc failed for objects");
	if (scene->objects)
	{
		ft_memcpy(new_objects, scene->objects, sizeof(t_object *) * (count
				+ 1));
		free(scene->objects);
	}
	new_objects[count] = obj;
	new_objects[count + 1] = NULL;
	scene->objects = new_objects;
}

// Añade una luz de forma dinámica a la escena
void	add_light_to_scene(t_scene *scene, t_light *light)
{
	int		count;
	t_light	**new_lights;

	count = 0;
	if (scene->lights)
		while (((t_light **)scene->lights)[count])
			count++;
	new_lights = (t_light **)malloc(sizeof(t_light *) * (count + 2));
	if (!new_lights)
		ft_error_exit("MiniRT: Error: Malloc failed for lights");
	if (scene->lights)
	{
		ft_memcpy(new_lights, scene->lights, sizeof(t_light *) * (count + 1));
		free(scene->lights);
	}
	new_lights[count] = light;
	new_lights[count + 1] = NULL;
	scene->lights = new_lights;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/12 22:25:08 by jaacosta          #+#    #+#             */
/*   Updated: 2025/08/12 22:25:11 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Validadcion para los valores doubles que deben ser positivos
double	parse_positive_double(char *str)
{
	double	val;
	char	*trimmed;

	trimmed = ft_strtrim(str, " \t\r\n");
	if (!trimmed)
		ft_error_exit("MiniRT: Error: Memory allocation failed");
	if (trimmed[0] == '\0')
		ft_error_exit("MiniRT: Error: Empty numeric value");
	val = ft_atod(trimmed);
	free(trimmed);
	if (val <= 0)
		ft_error_exit("MiniRT: Error: Incorrect data values");
	return (val);
}

// Validacion del valor fov de la camara
double	parse_fov(char *str)
{
	double	fov;
	char	*trimmed;

	fov = 0.0;
	if (!str)
		ft_error_exit("MiniRT: Error: FOV string is NULL");
	trimmed = ft_strtrim(str, " \r\t\n");
	if (!trimmed)
		ft_error_exit("MiniRT: Error: allocating memory failed in parse_fov");
	fov = ft_atod(trimmed);
	free(trimmed);
	if (fov < 0 || fov > 180)
		ft_error_exit("MiniRT: Error: FOV must be in range (0, 180)");
	return (fov);
}

// Convierte un string "x,y,z" a un t_vec3
t_vec3	parse_vec3(char *str)
{
	t_vec3	vec;
	char	**coords;

	coords = ft_split(str, ',');
	if (ft_strarr_len(coords) != 3)
		ft_error_exit("MiniRT: Error: Invalid vector format");
	vec.x = ft_atod(coords[0]);
	vec.y = ft_atod(coords[1]);
	vec.z = ft_atod(coords[2]);
	ft_free_str_array(coords);
	return (vec);
}

// valida que el vector "x,y,z" se encuentre normalizado entre [-1,1]
t_vec3	parse_vec3_normalized(char *str)
{
	t_vec3	vec;
	char	**coords;

	if (!str)
		ft_error_exit("MiniRT: Error: color string is NULL");
	coords = ft_split(str, ',');
	if (ft_strarr_len(coords) != 3)
	{
		ft_free_str_array(coords);
		ft_error_exit("MiniRT: Error: Invalid vector format");
	}
	vec.x = ft_atod(coords[0]);
	vec.y = ft_atod(coords[1]);
	vec.z = ft_atod(coords[2]);
	ft_free_str_array(coords);
	if (vec.x < -1 || vec.x > 1
		|| vec.y < -1 || vec.y > 1
		|| vec.z < -1 || vec.z > 1)
		ft_error_exit("MiniRT: Error: Vector components\
			normalized must be between -1 and 1");
	return (vec);
}

t_vec3	parse_vec3_color(char *str)
{
	t_vec3	color;
	char	**rgb;

	if (!str)
		ft_error_exit("MiniRT: Error: color string is NULL");
	rgb = ft_split(str, ',');
	if (ft_strarr_len(rgb) != 3)
	{
		ft_free_str_array(rgb);
		ft_error_exit("MiniRT: Error: Invalid color format");
	}
	color.x = validate_color_component(rgb[0]);
	color.y = validate_color_component(rgb[1]);
	color.z = validate_color_component(rgb[2]);
	ft_free_str_array(rgb);
	return (color);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils_materials_2.c                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 23:05:56 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/03 23:05:58 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

char	*copy_trimmed_token(char *token, int len)
{
	char	*trimmed;
	int		i;

	trimmed = (char *)malloc(len + 1);
	if (!trimmed)
		ft_error_exit("MiniRT: Error: allocating memory for bmp");
	i = 0;
	while (i < len)
	{
		trimmed[i] = token[i];
		i++;
	}
	trimmed[i] = '\0';
	return (trimmed);
}

char	*parse_bump_map(char *token)
{
	char	*path;
	int		len;
	int		fd;

	if (!token)
		ft_error_exit("MiniRT: Error: bump map token is missing");
	token += 4;
	len = 0;
	while (token[len] && token[len] != '\n' && token[len] != '\r'
		&& token[len] != ' ' && token[len] != '\t')
		len++;
	if (len <= 4)
		ft_error_exit("MiniRT: Error: bump map path is empty");
	path = copy_trimmed_token(token, len);
	if (!validate_texture_extension(path))
	{
		free(path);
		ft_error_exit("MiniRT: Error:  texture file \
			must have .png or .xpm extension");
	}
	fd = open_filename(path);
	validate_file(fd, path);
	close(fd);
	return (path);
}

static void	parse_basic_modifiers(t_object *obj, char **tokens, int *i)
{
	if (ft_strncmp(tokens[*i], "spc:", 4) == 0)
		parse_specular(tokens[*i], &obj->material->specular);
	else if (ft_strncmp(tokens[*i], "mir:", 4) == 0)
		obj->material->mirror_ratio = parse_mirror(tokens[*i]);
	else if (ft_strncmp(tokens[*i], "chk:", 4) == 0)
		parse_checkboard(tokens[*i], obj->material);
}

static void	parse_texture_modifier(t_object *obj, char *token)
{
	char	*path_bmp;

	if (ft_strncmp(token, "bmp:", 4) == 0)
	{
		path_bmp = ft_strtrim(token + 4, " \t\n\r");
		obj->material->texture = mlx_load_png(path_bmp);
		if (!obj->material->texture)
		{
			free(path_bmp);
			ft_error_exit("Error: Failed to load PNG bump map.");
		}
		obj->material->has_texture = true;
		free(path_bmp);
	}
}

void	apply_object_modifiers(t_object *obj, char **tokens, int start_idx)
{
	int	i;

	i = start_idx;
	while (tokens[i])
	{
		parse_basic_modifiers(obj, tokens, &i);
		parse_texture_modifier(obj, tokens[i]);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parser_utils_materials.c                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/03 23:05:56 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/03 23:05:58 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

int	valid_extension_rt(const char *filename)
{
	int	len;

	len = 0;
	while (filename[len] != '\0')
		len++;
	return (len > 3 && filename[len - 3] == '.'
		&& filename[len - 2] == 'r'
		&& filename[len - 1] == 't');
}

void	parse_specular(char *token, t_specular *spec)
{
	char	**parts;

	parts = ft_split(token + 4, ',');
	if (ft_strarr_len(parts) != 2)
		ft_error_exit("Error: Invalid specular format");
	spec->intensity = ft_atod(parts[0]);
	spec->shininess = (int)ft_atod(parts[1]);
	ft_free_str_array(parts);
}

double	parse_mirror(char *token)
{
	return (ft_atod(token + 4));
}

void	parse_checkboard(char *token, t_material *material)
{
	char	**parts;

	parts = ft_split(token + 4, ';');
	if (ft_strarr_len(parts) != 3)
		ft_error_exit("MiniRT: Error: Invalid checkerboard format");
	material->check_color1 = parse_vec3_color(parts[0]);
	material->check_color2 = parse_vec3_color(parts[1]);
	material->check_scale = ft_atod(parts[2]);
	material->has_checkerboard = 1;
	ft_free_str_array(parts);
}

int	validate_texture_extension(const char *file_name)
{
	int		len;

	if (!file_name)
		return (0);
	len = 0;
	while (file_name[len])
		len++;
	if (len >= 4 && file_name[len - 4] == '.'
		&& (file_name[len - 3] == 'p') || (file_name[len - 3] == 'P')
		&& (file_name[len - 2] == 'n') || (file_name[len - 2] == 'N')
		&& (file_name[len - 1] == 'g') || (file_name[len - 1] == 'G'))
		return (1);
	if (len >= 4 && file_name[len - 4] == '.'
		&& (file_name[len - 3] == 'x') || (file_name[len - 3] == 'X')
		&& (file_name[len - 2] == 'p') || (file_name[len - 2] == 'P')
		&& (file_name[len - 1] == 'm') || (file_name[len - 1] == 'M'))
		return (1);
	return (0);
}
#include "../include/minirt.h"

int	color_to_int(t_color color)
{
	int	r;
	int	g;
	int	b;
    int a;

	r = (int)(color.x * 255.00);
	g = (int)(color.y * 255.00);
	b = (int)(color.z * 255.00);
    a = 255;
	if (r < 0)
		r = 0;
	if (r > 255)
		r = 255;
	if (g < 0)
		g = 0;
	if (g > 255)
		g = 255;
	if (b < 0)
		b = 0;
	if (b > 255)
		b = 255;
	//return (0xFF000000 | (r << 16) | (g << 8) | b);
	return ((r << 24) | (g << 16) | (b << 8) | a);
}

// 4k
void *render_thread_func(void *arg)
{
    t_thread_data   *thread_data;
    t_data          *data;
    int             y, x;
    int             sub_x, sub_y;
    t_ray           ray;
    t_hit_record    rec;
    t_color         final_color;
    t_color         subpixel_color;
    double          inv_sub_sq = 1.0 / (double)(SUBPIXEL_SAMPLES * SUBPIXEL_SAMPLES);

    thread_data = (t_thread_data *)arg;
    data = thread_data->global_data;
    y = thread_data->start_row;
    while (y < thread_data->end_row)
    {
        x = 0;
        while (x < data->scene.width)
        {
            final_color = vec3_init(0.0, 0.0, 0.0);
            sub_y = 0;
            while (sub_y < SUBPIXEL_SAMPLES)
            {
                sub_x = 0;
                while (sub_x < SUBPIXEL_SAMPLES)
                {
                    // Genera un rayo para cada subpíxel
                    ray = generate_antialiased_ray(x, y, sub_x, sub_y, &data->scene);
                    rec = find_closest_hit(&ray, &data->scene);
                    
                    if (rec.object != NULL)
                        subpixel_color = calculate_light(&rec, &data->scene, &ray, 0);
                    else
                        subpixel_color = data->scene.background_color; 
                    
                    final_color = vec3_add(final_color, subpixel_color);
                    sub_x++;
                }
                sub_y++;
            }
            // Promedia el color final
            final_color = vec3_mul(final_color, inv_sub_sq);
            
            mlx_put_pixel(data->mlx.img.img_ptr, x, y, color_to_int(final_color));
            x++;
        }
        pthread_mutex_lock(&data->progress_mutex);
        data->rendered_rows++;
        pthread_mutex_unlock(&data->progress_mutex);
        
        y++;
    }
    return (NULL);
}

/* src/render.c */
void    render_threaded(t_data *data)
{
    pthread_t threads[data->num_threads];
    t_thread_data thread_data[data->num_threads];
    int i;
    int rows_per_thread;
    int start_row;

    rows_per_thread = data->scene.height / data->num_threads;

    i = 0;
    start_row = 0;
    while (i < data->num_threads)
    {
        thread_data[i].id = i;
        thread_data[i].start_row = start_row;
        if (i == data->num_threads - 1)
            thread_data[i].end_row = data->scene.height;
        else
            thread_data[i].end_row = start_row + rows_per_thread;
        thread_data[i].global_data = data;
        if (pthread_create(&threads[i], NULL, render_thread_func,
                &thread_data[i]) != 0)
        {
            printf("Error\nFallo al crear el hilo %d.\n", i);
            while (--i >= 0)
                pthread_join(threads[i], NULL);
            pthread_mutex_destroy(&data->progress_mutex);
            exit(1);
        }
        ft_printf("row per threads: %i, start: %i, end: %i\n", rows_per_thread,
            thread_data[i].start_row, thread_data[i].end_row);
        start_row = thread_data[i].end_row;
        i++;
    }

    // --- Bucle para imprimir el progreso en la consola ---
    while (data->rendered_rows < data->scene.height)
    {
        printf("\rRenderizando: %.2f%% completado...",
            ((double)data->rendered_rows / data->scene.height) * 100.0);
        fflush(stdout);
        usleep(50000);
    }
    printf("\rRenderizado: 100.00%% completado!\n");
    i = 0;
    while (i < data->num_threads)
    {
        pthread_join(threads[i], NULL);
        i++;
    }
    // No necesitas destruir el mutex aquí, ya lo haces en `cleanup_program`
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_esc_cal.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 18:34:31 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 19:07:39 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Calcula el producto escalar de dos vectores.
// Útil para calcular ángulos entre vectores, iluminación difusa, etc.
double	vec3_dot(t_vec3 v1, t_vec3 v2)
{
	return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);
}

// Calcula el producto vectorial de dos vectores.
// El resultado es un vector perpendicular a ambos vectores originales.
// Útil para calcular normales de superficie o ejes de coordenadas.
t_vec3	vec3_cross(t_vec3 v1, t_vec3 v2)
{
	return (vec3_init(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x
			* v2.y - v1.y * v2.x));
}

// Calcula la longitud (magnitud) de un vector.
// sqrt(x*x + y*y + z*z)
double	vec3_length(t_vec3 v)
{
	return (sqrt(vec3_dot(v, v)));
}

// Normaliza un vector (lo convierte en un vector unitario de longitud 1).
// Crucial para direcciones y normales.
t_vec3	vec3_normalize(t_vec3 v)
{
	double	length;

	length = vec3_length(v);
	if (length == 0.0)
		return (vec3_init(0, 0, 0));
	return (vec3_div(v, length));
}

// Calcula un punto a lo largo de un rayo dado un parámetro 't'.
// point = origin + t * direction
t_vec3	ray_at(t_ray r, double t)
{
	return (vec3_add(r.origin, vec3_mul(r.direction, t)));
}

// Calcula el vector reflejado de un rayo incidente sobre una superficie.
// v: vector incidente (dirección del rayo que llega a la superficie)
// n: normal de la superficie en el punto de impacto (normalizada)
// Formula: R = V - 2 * (V . N) * N
t_vec3	vec3_reflect(t_vec3 v, t_vec3 n)
{
	return (vec3_sub(v, vec3_mul(n, 2 * vec3_dot(v, n))));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_vec_cal.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 18:34:31 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 19:07:39 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

// Suma de dos vectores.
t_vec3	vec3_add(t_vec3 v1, t_vec3 v2)
{
	return (vec3_init(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z));
}

// Resta de dos vectores.
t_vec3	vec3_sub(t_vec3 v1, t_vec3 v2)
{
	return (vec3_init(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z));
}

// Multiplicación de un vector por un escalar.
t_vec3	vec3_mul(t_vec3 v, double scalar)
{
	return (vec3_init(v.x * scalar, v.y * scalar, v.z * scalar));
}

// División de un vector por un escalar.
// Manejar división por cero si es necesario
// aunque en ray tracing rara vez ocurre.
t_vec3	vec3_div(t_vec3 v, double scalar)
{
	if (scalar == 0.0)
		return (vec3_init(0, 0, 0));
	return (vec3_init(v.x / scalar, v.y / scalar, v.z / scalar));
}

// Multiplicación componente a componente de dos vectores (útil para colores).
t_vec3	vec3_mult_vec(t_vec3 v1, t_vec3 v2)
{
	return (vec3_init(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   nthreads.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jaacosta <jaacosta@student.42barcelon      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/04 20:34:13 by jaacosta          #+#    #+#             */
/*   Updated: 2025/09/04 20:34:16 by jaacosta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../include/minirt.h"

int	get_num_processors(void)
{
	long	num_cores;

	num_cores = sysconf(_SC_NPROCESSORS_ONLN);
	if (num_cores < 1)
		return (1);
	return ((int)num_cores);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   window.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rmarrero <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/19 18:34:31 by rmarrero          #+#    #+#             */
/*   Updated: 2025/02/19 19:07:39 by rmarrero         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../../include/minirt.h"

int	mlx_setup(t_data *data)
{
	data->mlx.mlx_ptr = mlx_init(data->scene.width, data->scene.height,
			"miniRT", true);
	if (!data->mlx.mlx_ptr)
		return (1);
	data->mlx.img.img_ptr = mlx_new_image(data->mlx.mlx_ptr, 4060, 2160);
	if (!data->mlx.img.img_ptr)
	{
		mlx_terminate(data->mlx.mlx_ptr);
		return (1);
	}
	if (mlx_image_to_window(data->mlx.mlx_ptr, data->mlx.img.img_ptr, 0, 0) < 0)
	{
		mlx_terminate(data->mlx.mlx_ptr);
		return (1);
	}
	return (0);
}

// Función para cerrar la ventana y liberar recursos
// Asumimos que esta es tu función para el hook MLX_ON_DESTROY (evento 17)
int	close_window(t_data *data)
{
	cleanup_program(data);
	exit(0);
	return (0);
}

// La función `key_hook` ahora accede a `data->mlx.mlx_ptr`
void	key_hook(mlx_key_data_t keydata, void *param)
{
	t_data	*data;

	data = (t_data *)param;
	if (keydata.key == MLX_KEY_ESCAPE && keydata.action == MLX_PRESS)
	{
		mlx_close_window(data->mlx.mlx_ptr);
	}
}
